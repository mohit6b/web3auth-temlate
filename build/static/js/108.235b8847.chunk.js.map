{"version":3,"file":"static/js/108.235b8847.chunk.js","mappings":"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","sources":["../node_modules/@web3auth/base-evm-adapter/node_modules/@web3auth/base/src/chain/IChainInterface.ts","../node_modules/@web3auth/base-evm-adapter/node_modules/@web3auth/base/src/chain/config.ts","../node_modules/@web3auth/base-evm-adapter/node_modules/@web3auth/base/src/errors/index.ts","../node_modules/@web3auth/base-evm-adapter/node_modules/@web3auth/base/src/wallet/index.ts","../node_modules/@web3auth/base-evm-adapter/node_modules/@web3auth/base/src/adapter/IAdapter.ts","../node_modules/@web3auth/base-evm-adapter/node_modules/@web3auth/base/src/constants.ts","../node_modules/@web3auth/base-evm-adapter/node_modules/@web3auth/base/src/loglevel.ts","../node_modules/@web3auth/base-evm-adapter/node_modules/@web3auth/base/src/utils.ts","../node_modules/@web3auth/base-evm-adapter/node_modules/@web3auth/base/src/adapter/utils.ts","../node_modules/@web3auth/base-evm-adapter/src/baseEvmAdapter.ts"],"sourcesContent":["export const CHAIN_NAMESPACES = {\n  EIP155: \"eip155\",\n  SOLANA: \"solana\",\n  OTHER: \"other\",\n} as const;\n// eip155 for all evm chains\nexport type ChainNamespaceType = typeof CHAIN_NAMESPACES[keyof typeof CHAIN_NAMESPACES];\n\nexport const ADAPTER_NAMESPACES = {\n  EIP155: \"eip155\",\n  SOLANA: \"solana\",\n  MULTICHAIN: \"multichain\",\n} as const;\n// eip155 for all evm chains\nexport type AdapterNamespaceType = typeof ADAPTER_NAMESPACES[keyof typeof ADAPTER_NAMESPACES];\n\nexport type CustomChainConfig = {\n  chainNamespace: ChainNamespaceType;\n  /**\n   * The chain id of the chain\n   */\n  chainId: string;\n  /**\n   * RPC target Url for the chain\n   */\n  rpcTarget: string;\n  /**\n   * Display Name for the chain\n   */\n  displayName: string;\n  /**\n   * Url of the block explorer\n   */\n  blockExplorer: string;\n  /**\n   * Default currency ticker of the network (e.g: ETH)\n   */\n  ticker: string;\n  /**\n   * Name for currency ticker (e.g: `Ethereum`)\n   */\n  tickerName: string;\n};\n","import { CHAIN_NAMESPACES, ChainNamespaceType, CustomChainConfig } from \"./IChainInterface\";\nconst getDefaultNetworkId = (chainNamespace: ChainNamespaceType): number => {\n  if (chainNamespace === CHAIN_NAMESPACES.EIP155) {\n    return 1;\n  } else if (chainNamespace === CHAIN_NAMESPACES.SOLANA) {\n    return 1;\n  }\n  throw new Error(`Chain namespace ${chainNamespace} is not supported`);\n};\n\nexport const getEvmChainConfig = (chainId: number): CustomChainConfig | null => {\n  const chainNamespace = CHAIN_NAMESPACES.EIP155;\n  if (chainId === 1) {\n    return {\n      chainNamespace,\n      chainId: \"0x1\",\n      rpcTarget: `https://rpc.ankr.com/eth`,\n      displayName: \"Ethereum Mainnet\",\n      blockExplorer: \"https://etherscan.io/\",\n      ticker: \"ETH\",\n      tickerName: \"Ethereum\",\n    };\n  }\n  if (chainId === 3) {\n    return {\n      chainNamespace,\n      chainId: \"0x3\",\n      rpcTarget: `https://rpc.ankr.com/eth_ropsten`,\n      displayName: \"Ropsten Testnet\",\n      blockExplorer: \"https://ropsten.etherscan.io/\",\n      ticker: \"ETH\",\n      tickerName: \"Ethereum\",\n    };\n  }\n  if (chainId === 4) {\n    return {\n      chainNamespace,\n      chainId: \"0x4\",\n      rpcTarget: `https://rpc.ankr.com/eth_rinkeby`,\n      displayName: \"Rinkeby Testnet\",\n      blockExplorer: \"https://rinkeby.etherscan.io/\",\n      ticker: \"ETH\",\n      tickerName: \"Ethereum\",\n    };\n  }\n  if (chainId === 5) {\n    return {\n      chainNamespace,\n      chainId: \"0x5\",\n      rpcTarget: `https://rpc.ankr.com/eth_goerli`,\n      displayName: \"Goerli Testnet\",\n      blockExplorer: \"https://goerli.etherscan.io/\",\n      ticker: \"ETH\",\n      tickerName: \"Ethereum\",\n    };\n  }\n  if (chainId === 137) {\n    return {\n      chainNamespace,\n      chainId: \"0x89\",\n      rpcTarget: \"https://rpc.ankr.com/polygon\",\n      displayName: \"Polygon Mainnet\",\n      blockExplorer: \"https://polygonscan.com\",\n      ticker: \"MATIC\",\n      tickerName: \"Polygon\",\n    };\n  }\n  if (chainId === 80001) {\n    return {\n      chainNamespace,\n      chainId: \"0x13881\",\n      rpcTarget: \"https://rpc.ankr.com/polygon_mumbai\",\n      displayName: \"Polygon Mumbai Testnet\",\n      blockExplorer: \"https://mumbai.polygonscan.com/\",\n      ticker: \"MATIC\",\n      tickerName: \"Polygon\",\n    };\n  }\n  if (chainId === 56) {\n    return {\n      chainNamespace,\n      chainId: \"0x38\",\n      rpcTarget: \"https://rpc.ankr.com/bsc\",\n      displayName: \"Binance SmartChain Mainnet\",\n      blockExplorer: \"https://bscscan.com\",\n      ticker: \"BNB\",\n      tickerName: \"Binance SmartChain\",\n    };\n  }\n  if (chainId === 97) {\n    return {\n      chainNamespace,\n      chainId: \"0x61\",\n      rpcTarget: \"https://rpc.ankr.com/bsc_testnet_chapel\",\n      displayName: \"Binance SmartChain Testnet\",\n      blockExplorer: \"https://testnet.bscscan.com\",\n      ticker: \"BNB\",\n      tickerName: \"Binance SmartChain\",\n    };\n  }\n  if (chainId === 25) {\n    return {\n      chainNamespace,\n      chainId: \"0x19\",\n      rpcTarget: \"https://rpc.cronos.org\",\n      displayName: \"Cronos Mainnet\",\n      blockExplorer: \"https://cronoscan.com/\",\n      ticker: \"CRO\",\n      tickerName: \"Cronos\",\n    };\n  }\n  if (chainId === 338) {\n    return {\n      chainNamespace,\n      chainId: \"0x152\",\n      rpcTarget: \"https://rpc-t3.cronos.org/\",\n      displayName: \"Cronos Testnet\",\n      blockExplorer: \"https://cronoscan.com/\",\n      ticker: \"CRO\",\n      tickerName: \"Cronos\",\n    };\n  }\n  if (chainId === 8217) {\n    return {\n      chainNamespace,\n      chainId: \"0x2019\",\n      rpcTarget: \"https://public-node-api.klaytnapi.com/v1/cypress\",\n      displayName: \"Klaytn Mainnet\",\n      blockExplorer: \"https://scope.klaytn.com\",\n      ticker: \"KLAY\",\n      tickerName: \"Klaytn\",\n    };\n  }\n\n  return null;\n};\n\nexport const getSolanaChainConfig = (chainId: number): CustomChainConfig | null => {\n  const chainNamespace = CHAIN_NAMESPACES.SOLANA;\n  if (chainId === 1) {\n    return {\n      chainNamespace,\n      chainId: \"0x1\",\n      rpcTarget: \"https://rpc.ankr.com/solana\",\n      displayName: \"Solana Mainnet\",\n      blockExplorer: \"https://explorer.solana.com\",\n      ticker: \"SOL\",\n      tickerName: \"Solana\",\n    };\n  } else if (chainId === 2) {\n    return {\n      chainNamespace,\n      chainId: \"0x2\",\n      rpcTarget: \"https://api.testnet.solana.com\",\n      displayName: \"Solana Testnet\",\n      blockExplorer: \"https://explorer.solana.com?cluster=testnet\",\n      ticker: \"SOL\",\n      tickerName: \"Solana\",\n    };\n  } else if (chainId === 3) {\n    return {\n      chainNamespace,\n      chainId: \"0x3\",\n      rpcTarget: \"https://api.devnet.solana.com\",\n      displayName: \"Solana Devnet\",\n      blockExplorer: \"https://explorer.solana.com?cluster=devnet\",\n      ticker: \"SOL\",\n      tickerName: \"Solana\",\n    };\n  }\n\n  return null;\n};\n\nexport const getChainConfig = (chainNamespace: ChainNamespaceType, chainId?: number | string): CustomChainConfig | null => {\n  if (chainNamespace === CHAIN_NAMESPACES.OTHER) return null;\n  const finalChainId = chainId ? (typeof chainId === \"number\" ? chainId : parseInt(chainId, 16)) : getDefaultNetworkId(chainNamespace);\n  if (chainNamespace === CHAIN_NAMESPACES.EIP155) {\n    return getEvmChainConfig(finalChainId);\n  } else if (chainNamespace === CHAIN_NAMESPACES.SOLANA) {\n    return getSolanaChainConfig(finalChainId);\n  }\n  return null;\n};\n","import { CustomError } from \"ts-custom-error\";\n\n// @flow\nexport interface IWeb3AuthError extends CustomError {\n  code: number;\n  message: string;\n  toString(): string;\n}\n\nexport type ErrorCodes = {\n  [key: number]: string;\n};\n\nexport abstract class Web3AuthError extends CustomError implements IWeb3AuthError {\n  code: number;\n\n  message: string;\n\n  public constructor(code: number, message?: string) {\n    // takes care of stack and proto\n    super(message);\n\n    this.code = code;\n    this.message = message || \"\";\n    // Set name explicitly as minification can mangle class names\n    Object.defineProperty(this, \"name\", { value: \"Web3AuthError\" });\n  }\n\n  toJSON(): IWeb3AuthError {\n    return {\n      name: this.name,\n      code: this.code,\n      message: this.message,\n    };\n  }\n\n  toString(): string {\n    return JSON.stringify(this.toJSON());\n  }\n}\n\nexport class WalletInitializationError extends Web3AuthError {\n  protected static messages: ErrorCodes = {\n    5000: \"Custom\",\n    5001: \"Wallet is not found\",\n    5002: \"Wallet is not installed\",\n    5003: \"Wallet is not ready yet\",\n    5004: \"Wallet window is blocked\",\n    5005: \"Wallet window has been closed by the user\",\n    5006: \"Incompatible chain namespace provided\",\n    5007: \"Adapter has already been included\",\n    5008: \"Invalid provider Config\",\n    5009: \"Provider is not ready yet\",\n    5010: \"Failed to connect with rpc url\",\n    5011: \"Invalid params passed in\",\n    5013: \"Invalid network provided\",\n  };\n\n  public constructor(code: number, message?: string) {\n    // takes care of stack and proto\n    super(code, message);\n\n    // Set name explicitly as minification can mangle class names\n    Object.defineProperty(this, \"name\", { value: \"WalletInitializationError\" });\n  }\n\n  public static fromCode(code: number, extraMessage = \"\"): IWeb3AuthError {\n    return new WalletInitializationError(code, `${WalletInitializationError.messages[code]}, ${extraMessage}`);\n  }\n\n  // Custom methods\n  public static notFound(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5001, extraMessage);\n  }\n\n  public static notInstalled(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5002, extraMessage);\n  }\n\n  public static notReady(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5003, extraMessage);\n  }\n\n  public static windowBlocked(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5004, extraMessage);\n  }\n\n  public static windowClosed(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5005, extraMessage);\n  }\n\n  public static incompatibleChainNameSpace(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5006, extraMessage);\n  }\n\n  public static duplicateAdapterError(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5007, extraMessage);\n  }\n\n  public static invalidProviderConfigError(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5008, extraMessage);\n  }\n\n  public static providerNotReadyError(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5009, extraMessage);\n  }\n\n  public static rpcConnectionError(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5010, extraMessage);\n  }\n\n  public static invalidParams(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5011, extraMessage);\n  }\n\n  public static invalidNetwork(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5013, extraMessage);\n  }\n}\n\n/**\n * wallet login errors\n */\n\nexport class WalletLoginError extends Web3AuthError {\n  protected static messages: ErrorCodes = {\n    5000: \"Custom\",\n    5111: \"Failed to connect with wallet\",\n    5112: \"Failed to disconnect from wallet\",\n    5113: \"Wallet is not connected\",\n    5114: \"Wallet popup has been closed by the user\",\n  };\n\n  public constructor(code: number, message?: string) {\n    // takes care of stack and proto\n    super(code, message);\n\n    // Set name explicitly as minification can mangle class names\n    Object.defineProperty(this, \"name\", { value: \"WalletLoginError\" });\n  }\n\n  public static fromCode(code: number, extraMessage = \"\"): IWeb3AuthError {\n    return new WalletLoginError(code, `${WalletLoginError.messages[code]}${extraMessage}`);\n  }\n\n  public static connectionError(extraMessage = \"\"): IWeb3AuthError {\n    return WalletLoginError.fromCode(5111, extraMessage);\n  }\n\n  public static disconnectionError(extraMessage = \"\"): IWeb3AuthError {\n    return WalletLoginError.fromCode(5112, extraMessage);\n  }\n\n  public static notConnectedError(extraMessage = \"\"): IWeb3AuthError {\n    return WalletLoginError.fromCode(5113, extraMessage);\n  }\n\n  public static popupClosed(extraMessage = \"\"): IWeb3AuthError {\n    return WalletLoginError.fromCode(5114, extraMessage);\n  }\n}\n","export const MULTI_CHAIN_ADAPTERS = {\n  OPENLOGIN: \"openlogin\",\n  WALLET_CONNECT_V1: \"wallet-connect-v1\",\n  WALLET_CONNECT_V2: \"wallet-connect-v2\",\n};\n\nexport const SOLANA_ADAPTERS = {\n  TORUS_SOLANA: \"torus-solana\",\n  PHANTOM: \"phantom\",\n  SOLLET: \"sollet\",\n  SOLLET_EXTENSION: \"sollet-extension\",\n  SOLFLARE: \"solflare\",\n  SLOPE: \"slope\",\n  ...MULTI_CHAIN_ADAPTERS,\n};\n\nexport const EVM_ADAPTERS = {\n  TORUS_EVM: \"torus-evm\",\n  METAMASK: \"metamask\",\n  COINBASE: \"coinbase\",\n  ...MULTI_CHAIN_ADAPTERS,\n};\n\nexport const WALLET_ADAPTERS = {\n  ...EVM_ADAPTERS,\n  ...SOLANA_ADAPTERS,\n};\nexport type WALLET_ADAPTER_TYPE = typeof WALLET_ADAPTERS[keyof typeof WALLET_ADAPTERS];\nexport type SOLANA_ADAPTER_TYPE = typeof SOLANA_ADAPTERS[keyof typeof SOLANA_ADAPTERS];\nexport type EVM_ADAPTER_TYPE = typeof EVM_ADAPTERS[keyof typeof EVM_ADAPTERS];\nexport type MULTI_CHAIN_ADAPTER_TYPE = typeof MULTI_CHAIN_ADAPTERS[keyof typeof MULTI_CHAIN_ADAPTERS];\n","import type { OpenloginUserInfo } from \"@toruslabs/openlogin\";\nimport { SafeEventEmitter } from \"@toruslabs/openlogin-jrpc\";\n\nimport { getChainConfig } from \"../chain/config\";\nimport { AdapterNamespaceType, ChainNamespaceType, CustomChainConfig } from \"../chain/IChainInterface\";\nimport { WalletInitializationError, WalletLoginError } from \"../errors\";\nimport { SafeEventEmitterProvider } from \"../provider/IProvider\";\nimport { WALLET_ADAPTERS } from \"../wallet\";\n\nexport type UserInfo = OpenloginUserInfo;\n\nexport const ADAPTER_CATEGORY = {\n  EXTERNAL: \"external\",\n  IN_APP: \"in_app\",\n} as const;\nexport type ADAPTER_CATEGORY_TYPE = typeof ADAPTER_CATEGORY[keyof typeof ADAPTER_CATEGORY];\n\nexport interface AdapterInitOptions {\n  /**\n   * Whether to auto connect to the adapter based on redirect mode or saved adapters\n   */\n  autoConnect?: boolean;\n}\n\nexport const ADAPTER_STATUS = {\n  NOT_READY: \"not_ready\",\n  READY: \"ready\",\n  CONNECTING: \"connecting\",\n  CONNECTED: \"connected\",\n  DISCONNECTED: \"disconnected\",\n  ERRORED: \"errored\",\n} as const;\n\nexport const ADAPTER_EVENTS = {\n  ...ADAPTER_STATUS,\n  ADAPTER_DATA_UPDATED: \"adapter_data_updated\",\n} as const;\nexport type ADAPTER_STATUS_TYPE = typeof ADAPTER_STATUS[keyof typeof ADAPTER_STATUS];\n\nexport type CONNECTED_EVENT_DATA = {\n  adapter: string;\n  reconnected: boolean;\n};\n\nexport type UserAuthInfo = { idToken: string };\nexport interface IAdapter<T> extends SafeEventEmitter {\n  adapterNamespace: AdapterNamespaceType;\n  currentChainNamespace: ChainNamespaceType;\n  chainConfigProxy: CustomChainConfig | null;\n  type: ADAPTER_CATEGORY_TYPE;\n  name: string;\n  sessionTime: number;\n  status: ADAPTER_STATUS_TYPE;\n  provider: SafeEventEmitterProvider | null;\n  adapterData?: unknown;\n  init(options?: AdapterInitOptions): Promise<void>;\n  disconnect(options?: { cleanup: boolean }): Promise<void>;\n  connect(params?: T): Promise<SafeEventEmitterProvider | null>;\n  getUserInfo(): Promise<Partial<UserInfo>>;\n  setChainConfig(customChainConfig: CustomChainConfig): void;\n  setAdapterSettings(adapterSettings: unknown): void;\n  authenticateUser(): Promise<UserAuthInfo>;\n}\n\nexport abstract class BaseAdapter<T> extends SafeEventEmitter implements IAdapter<T> {\n  public adapterData?: unknown = {};\n\n  public sessionTime = 86400;\n\n  // should be added in constructor or from setChainConfig function\n  // before calling init function.\n  protected chainConfig: CustomChainConfig | null = null;\n\n  public abstract clientId: string;\n\n  public abstract adapterNamespace: AdapterNamespaceType;\n\n  public abstract currentChainNamespace: ChainNamespaceType;\n\n  public abstract type: ADAPTER_CATEGORY_TYPE;\n\n  public abstract name: string;\n\n  public abstract status: ADAPTER_STATUS_TYPE;\n\n  get chainConfigProxy(): CustomChainConfig | null {\n    return this.chainConfig ? { ...this.chainConfig } : null;\n  }\n\n  public abstract get provider(): SafeEventEmitterProvider | null;\n\n  setChainConfig(customChainConfig: CustomChainConfig): void {\n    if (this.status === ADAPTER_STATUS.READY) return;\n    if (!customChainConfig.chainNamespace) throw WalletInitializationError.notReady(\"ChainNamespace is required while setting chainConfig\");\n    const defaultChainConfig = getChainConfig(customChainConfig.chainNamespace, customChainConfig.chainId);\n    this.chainConfig = { ...defaultChainConfig, ...customChainConfig };\n  }\n\n  setAdapterSettings(_: unknown): void {}\n\n  checkConnectionRequirements(): void {\n    // we reconnect without killing existing wallet connect session on calling connect again.\n    if (this.name === WALLET_ADAPTERS.WALLET_CONNECT_V1 && this.status === ADAPTER_STATUS.CONNECTING) return;\n    else if (this.status === ADAPTER_STATUS.CONNECTING) throw WalletInitializationError.notReady(\"Already connecting\");\n\n    if (this.status === ADAPTER_STATUS.CONNECTED) throw WalletLoginError.connectionError(\"Already connected\");\n    if (this.status !== ADAPTER_STATUS.READY)\n      throw WalletLoginError.connectionError(\n        \"Wallet adapter is not ready yet, Please wait for init function to resolve before calling connect/connectTo function\"\n      );\n    if (!this.clientId) throw WalletLoginError.connectionError(\"Please initialize Web3Auth with a valid clientId in constructor\");\n  }\n\n  checkInitializationRequirements(): void {\n    if (this.status === ADAPTER_STATUS.NOT_READY) return;\n    if (this.status === ADAPTER_STATUS.CONNECTED) throw WalletInitializationError.notReady(\"Already connected\");\n    if (this.status === ADAPTER_STATUS.READY) throw WalletInitializationError.notReady(\"Adapter is already initialized\");\n  }\n\n  updateAdapterData(data: unknown): void {\n    this.adapterData = data;\n    this.emit(ADAPTER_EVENTS.ADAPTER_DATA_UPDATED, { adapterName: this.name, data });\n  }\n\n  abstract init(options?: AdapterInitOptions): Promise<void>;\n  abstract connect(params?: T): Promise<SafeEventEmitterProvider | null>;\n  abstract disconnect(): Promise<void>;\n  abstract getUserInfo(): Promise<Partial<UserInfo>>;\n  abstract authenticateUser(): Promise<UserAuthInfo>;\n}\n\nexport interface BaseAdapterConfig {\n  label: string;\n  showOnModal?: boolean;\n  showOnMobile?: boolean;\n  showOnDesktop?: boolean;\n}\n\nexport type LoginMethodConfig = Record<\n  string,\n  {\n    /**\n     * Display Name. If not provided, we use the default for openlogin app\n     */\n    name: string;\n    /**\n     * Description for button. If provided, it renders as a full length button. else, icon button\n     */\n    description?: string;\n    /**\n     * Logo to be shown on mouse hover. If not provided, we use the default for openlogin app\n     */\n    logoHover?: string;\n    /**\n     * Logo to be shown on dark background (dark theme). If not provided, we use the default for openlogin app\n     */\n    logoLight?: string;\n    /**\n     * Logo to be shown on light background (light theme). If not provided, we use the default for openlogin app\n     */\n    logoDark?: string;\n    /**\n     * Show login button on the main list\n     */\n    mainOption?: boolean;\n    /**\n     * Whether to show the login button on modal or not\n     */\n    showOnModal?: boolean;\n    /**\n     * Whether to show the login button on desktop\n     */\n    showOnDesktop?: boolean;\n    /**\n     * Whether to show the login button on mobile\n     */\n    showOnMobile?: boolean;\n  }\n>;\n\nexport interface IWalletConnectExtensionAdapter {\n  name: string;\n  chains: ChainNamespaceType[];\n  logo: string;\n  mobile: {\n    native: string;\n    universal: string;\n  };\n  desktop: {\n    native: string;\n    universal: string;\n  };\n}\n\nexport interface WalletConnectV1Data {\n  uri: string;\n  extensionAdapters: IWalletConnectExtensionAdapter[];\n}\n\nexport interface IAdapterDataEvent {\n  adapterName: string;\n  data: unknown;\n}\n\nexport interface INetworkSwitchProvider {\n  addChain(chainConfig: CustomChainConfig): Promise<void>;\n  switchChain(chainId: string): Promise<void>;\n}\nexport interface INetworkSwitch {\n  addNetwork(params: { chainConfig: CustomChainConfig; appOrigin: string }): Promise<boolean>;\n  switchNetwork(params: { currentChainConfig: CustomChainConfig; newChainConfig: Partial<CustomChainConfig>; appOrigin: string }): Promise<boolean>;\n}\n\nexport abstract class BaseNetworkSwitch implements INetworkSwitch {\n  abstract switchNetwork(params: {\n    currentChainConfig: CustomChainConfig;\n    newChainConfig: Partial<CustomChainConfig>;\n    appOrigin: string;\n  }): Promise<boolean>;\n\n  abstract addNetwork(params: { chainConfig: CustomChainConfig; appOrigin: string }): Promise<boolean>;\n}\n","export const authServer = \"https://authjs.web3auth.io\";\n","import loglevel from \"loglevel\";\n\nexport default loglevel.getLogger(\"web3auth-logger\");\n","export function storageAvailable(type: \"sessionStorage\" | \"localStorage\"): boolean {\n  let storageExists = false;\n  let storageLength = 0;\n  let storage: Storage;\n  try {\n    storage = (window as any)[type];\n    storageExists = true;\n    storageLength = storage.length;\n    const x = \"__storage_test__\";\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return true;\n  } catch (error: unknown) {\n    const _error = error as DOMException;\n    return !!(\n      _error &&\n      // everything except Firefox\n      (_error.code === 22 ||\n        // Firefox\n        _error.code === 1014 ||\n        // test name field too, because code might not be present\n        // everything except Firefox\n        _error.name === \"QuotaExceededError\" ||\n        // Firefox\n        _error.name === \"NS_ERROR_DOM_QUOTA_REACHED\") &&\n      // acknowledge QuotaExceededError only if there's something already stored\n      storageExists &&\n      storageLength !== 0\n    );\n  }\n}\n\nexport const isHexStrict = (hex: string): boolean => {\n  return (typeof hex === \"string\" || typeof hex === \"number\") && /^(-)?0x[0-9a-f]*$/i.test(hex);\n};\n","import { post } from \"@toruslabs/http-helpers\";\nimport JwtDecode from \"jwt-decode\";\n\nimport { ChainNamespaceType } from \"../chain/IChainInterface\";\nimport { authServer } from \"../constants\";\nimport log from \"../loglevel\";\nimport { storageAvailable } from \"../utils\";\n\nexport const checkIfTokenIsExpired = (token: string) => {\n  const decoded = JwtDecode<{ exp: number }>(token);\n  if (!decoded.exp) {\n    return true;\n  }\n  if (decoded.exp < Math.floor(Date.now() / 1000)) {\n    return true;\n  }\n  return false;\n};\n\nexport const signChallenge = async (payload: Record<string, string | number>, chainNamespace: ChainNamespaceType): Promise<string> => {\n  const t = chainNamespace === \"solana\" ? \"sip99\" : \"eip191\";\n  const header = {\n    t,\n  };\n\n  const network = chainNamespace === \"solana\" ? \"solana\" : \"ethereum\";\n  const data = {\n    payload,\n    header,\n    network,\n  };\n  const res = await post<{ success: boolean; challenge: string }>(`${authServer}/siww/get`, data);\n  if (!res.success) {\n    throw new Error(\"Failed to authenticate user, Please reach out to Web3Auth Support team\");\n  }\n\n  return res.challenge;\n};\n\nexport const verifySignedChallenge = async (\n  chainNamespace: ChainNamespaceType,\n  signedMessage: string,\n  challenge: string,\n  issuer: string,\n  sessionTime: number,\n  clientId?: string\n): Promise<string> => {\n  const t = chainNamespace === \"solana\" ? \"sip99\" : \"eip191\";\n  const sigData = {\n    signature: {\n      s: signedMessage,\n      t,\n    },\n    message: challenge,\n    issuer,\n    audience: window.location.hostname,\n    timeout: sessionTime,\n  };\n\n  const idTokenRes = await post<{ success: boolean; token: string; error?: string }>(`${authServer}/siww/verify`, sigData, {\n    headers: {\n      client_id: clientId,\n      wallet_provider: issuer,\n    },\n  });\n  if (!idTokenRes.success) {\n    log.error(\"Failed to authenticate user, ,message verification failed\", idTokenRes.error);\n    throw new Error(\"Failed to authenticate user, ,message verification failed\");\n  }\n  return idTokenRes.token;\n};\n\nexport const getSavedToken = (userAddress: string, issuer: string) => {\n  if (storageAvailable(\"localStorage\")) {\n    return localStorage.getItem(`${userAddress.toLowerCase()}_${issuer}`);\n  }\n  return null;\n};\n\nexport const saveToken = (userAddress: string, issuer: string, token: string) => {\n  if (storageAvailable(\"localStorage\")) {\n    return localStorage.setItem(`${userAddress.toLowerCase()}_${issuer}`, token);\n  }\n  return null;\n};\n\nexport const clearToken = (userAddress: string, issuer: string) => {\n  if (storageAvailable(\"localStorage\")) {\n    return localStorage.removeItem(`${userAddress.toLowerCase()}_${issuer}`);\n  }\n  return null;\n};\n","import {\n  ADAPTER_STATUS,\n  BaseAdapter,\n  checkIfTokenIsExpired,\n  clearToken,\n  getSavedToken,\n  saveToken,\n  signChallenge,\n  UserAuthInfo,\n  verifySignedChallenge,\n  WalletLoginError,\n} from \"@web3auth/base\";\n\nexport abstract class BaseEvmAdapter<T> extends BaseAdapter<T> {\n  public clientId: string;\n\n  constructor(params: { clientId?: string } = {}) {\n    super();\n    this.clientId = params.clientId;\n  }\n\n  async authenticateUser(): Promise<UserAuthInfo> {\n    if (!this.provider || !this.chainConfig?.chainId) throw WalletLoginError.notConnectedError();\n    const { chainNamespace, chainId } = this.chainConfig;\n\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    const accounts = await this.provider.request<string[]>({\n      method: \"eth_accounts\",\n    });\n    if (accounts && accounts.length > 0) {\n      const existingToken = getSavedToken(accounts[0] as string, this.name);\n      if (existingToken) {\n        const isExpired = checkIfTokenIsExpired(existingToken);\n        if (!isExpired) {\n          return { idToken: existingToken };\n        }\n      }\n\n      const payload = {\n        domain: window.location.origin,\n        uri: window.location.href,\n        address: accounts[0],\n        chainId: parseInt(chainId, 16),\n        version: \"1\",\n        nonce: Math.random().toString(36).slice(2),\n        issuedAt: new Date().toISOString(),\n      };\n\n      const challenge = await signChallenge(payload, chainNamespace);\n\n      const signedMessage = await this.provider.request<string>({\n        method: \"personal_sign\",\n        params: [challenge, accounts[0]],\n      });\n\n      const idToken = await verifySignedChallenge(chainNamespace, signedMessage as string, challenge, this.name, this.sessionTime, this.clientId);\n      saveToken(accounts[0] as string, this.name, idToken);\n      return {\n        idToken,\n      };\n    }\n    throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n  }\n\n  async disconnect(): Promise<void> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.disconnectionError(\"Not connected with wallet\");\n    const accounts = await this.provider.request<string[]>({\n      method: \"eth_accounts\",\n    });\n    if (accounts && accounts.length > 0) {\n      clearToken(accounts[0], this.name);\n    }\n  }\n}\n"],"names":["CHAIN_NAMESPACES","getChainConfig","chainNamespace","chainId","finalChainId","parseInt","Error","getDefaultNetworkId","rpcTarget","displayName","blockExplorer","ticker","tickerName","getEvmChainConfig","getSolanaChainConfig","Web3AuthError","_inherits","code","message","_classCallCheck","_this","_defineProperty","Object","defineProperty","_assertThisInitialized","value","_createClass","key","name","this","JSON","stringify","toJSON","CustomError","WalletInitializationError","_this2","extraMessage","messages","concat","fromCode","WalletLoginError","_this3","MULTI_CHAIN_ADAPTERS","OPENLOGIN","WALLET_CONNECT_V1","WALLET_CONNECT_V2","SOLANA_ADAPTERS","TORUS_SOLANA","PHANTOM","SOLLET","SOLLET_EXTENSION","SOLFLARE","SLOPE","EVM_ADAPTERS","TORUS_EVM","METAMASK","COINBASE","WALLET_ADAPTERS","ADAPTER_STATUS","NOT_READY","READY","CONNECTING","CONNECTED","DISCONNECTED","ERRORED","ADAPTER_EVENTS","ADAPTER_DATA_UPDATED","BaseAdapter","args","get","chainConfig","customChainConfig","status","notReady","defaultChainConfig","_","connectionError","clientId","data","adapterData","emit","adapterName","SafeEventEmitter","authServer","loglevel","storageAvailable","type","storage","storageExists","storageLength","window","length","x","setItem","removeItem","error","_error","checkIfTokenIsExpired","token","decoded","JwtDecode","exp","Math","floor","Date","now","signChallenge","_ref","payload","header","t","network","_context","post","res","success","challenge","verifySignedChallenge","_ref2","signedMessage","issuer","sessionTime","sigData","signature","s","audience","location","hostname","timeout","_context2","headers","client_id","wallet_provider","idTokenRes","log","saveToken","userAddress","localStorage","toLowerCase","BaseEvmAdapter","params","_authenticateUser","provider","_this$chainConfig","notConnectedError","_this$chainConfig2","request","method","accounts","existingToken","getItem","idToken","domain","origin","uri","href","address","version","nonce","random","toString","slice","issuedAt","toISOString","_disconnect","disconnectionError"],"sourceRoot":""}