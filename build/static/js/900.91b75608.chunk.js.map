{"version":3,"file":"static/js/900.91b75608.chunk.js","mappings":"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","sources":["../node_modules/@web3auth/openlogin-adapter/node_modules/@web3auth/base/src/chain/IChainInterface.ts","../node_modules/@web3auth/openlogin-adapter/node_modules/@web3auth/base/src/chain/config.ts","../node_modules/@web3auth/openlogin-adapter/node_modules/@web3auth/base/src/errors/index.ts","../node_modules/@web3auth/openlogin-adapter/node_modules/@web3auth/base/src/wallet/index.ts","../node_modules/@web3auth/openlogin-adapter/node_modules/@web3auth/base/src/adapter/IAdapter.ts","../node_modules/@web3auth/openlogin-adapter/node_modules/@web3auth/base/src/loglevel.ts","../node_modules/@web3auth/openlogin-adapter/src/config.ts","../node_modules/@web3auth/openlogin-adapter/src/openloginAdapter.ts"],"sourcesContent":["export const CHAIN_NAMESPACES = {\n  EIP155: \"eip155\",\n  SOLANA: \"solana\",\n  OTHER: \"other\",\n} as const;\n// eip155 for all evm chains\nexport type ChainNamespaceType = typeof CHAIN_NAMESPACES[keyof typeof CHAIN_NAMESPACES];\n\nexport const ADAPTER_NAMESPACES = {\n  EIP155: \"eip155\",\n  SOLANA: \"solana\",\n  MULTICHAIN: \"multichain\",\n} as const;\n// eip155 for all evm chains\nexport type AdapterNamespaceType = typeof ADAPTER_NAMESPACES[keyof typeof ADAPTER_NAMESPACES];\n\nexport type CustomChainConfig = {\n  chainNamespace: ChainNamespaceType;\n  /**\n   * The chain id of the chain\n   */\n  chainId: string;\n  /**\n   * RPC target Url for the chain\n   */\n  rpcTarget: string;\n  /**\n   * Display Name for the chain\n   */\n  displayName: string;\n  /**\n   * Url of the block explorer\n   */\n  blockExplorer: string;\n  /**\n   * Default currency ticker of the network (e.g: ETH)\n   */\n  ticker: string;\n  /**\n   * Name for currency ticker (e.g: `Ethereum`)\n   */\n  tickerName: string;\n};\n","import { CHAIN_NAMESPACES, ChainNamespaceType, CustomChainConfig } from \"./IChainInterface\";\nconst getDefaultNetworkId = (chainNamespace: ChainNamespaceType): number => {\n  if (chainNamespace === CHAIN_NAMESPACES.EIP155) {\n    return 1;\n  } else if (chainNamespace === CHAIN_NAMESPACES.SOLANA) {\n    return 1;\n  }\n  throw new Error(`Chain namespace ${chainNamespace} is not supported`);\n};\n\nexport const getEvmChainConfig = (chainId: number): CustomChainConfig | null => {\n  const chainNamespace = CHAIN_NAMESPACES.EIP155;\n  if (chainId === 1) {\n    return {\n      chainNamespace,\n      chainId: \"0x1\",\n      rpcTarget: `https://rpc.ankr.com/eth`,\n      displayName: \"Ethereum Mainnet\",\n      blockExplorer: \"https://etherscan.io/\",\n      ticker: \"ETH\",\n      tickerName: \"Ethereum\",\n    };\n  }\n  if (chainId === 3) {\n    return {\n      chainNamespace,\n      chainId: \"0x3\",\n      rpcTarget: `https://rpc.ankr.com/eth_ropsten`,\n      displayName: \"Ropsten Testnet\",\n      blockExplorer: \"https://ropsten.etherscan.io/\",\n      ticker: \"ETH\",\n      tickerName: \"Ethereum\",\n    };\n  }\n  if (chainId === 4) {\n    return {\n      chainNamespace,\n      chainId: \"0x4\",\n      rpcTarget: `https://rpc.ankr.com/eth_rinkeby`,\n      displayName: \"Rinkeby Testnet\",\n      blockExplorer: \"https://rinkeby.etherscan.io/\",\n      ticker: \"ETH\",\n      tickerName: \"Ethereum\",\n    };\n  }\n  if (chainId === 5) {\n    return {\n      chainNamespace,\n      chainId: \"0x5\",\n      rpcTarget: `https://rpc.ankr.com/eth_goerli`,\n      displayName: \"Goerli Testnet\",\n      blockExplorer: \"https://goerli.etherscan.io/\",\n      ticker: \"ETH\",\n      tickerName: \"Ethereum\",\n    };\n  }\n  if (chainId === 137) {\n    return {\n      chainNamespace,\n      chainId: \"0x89\",\n      rpcTarget: \"https://rpc.ankr.com/polygon\",\n      displayName: \"Polygon Mainnet\",\n      blockExplorer: \"https://polygonscan.com\",\n      ticker: \"MATIC\",\n      tickerName: \"Polygon\",\n    };\n  }\n  if (chainId === 80001) {\n    return {\n      chainNamespace,\n      chainId: \"0x13881\",\n      rpcTarget: \"https://rpc.ankr.com/polygon_mumbai\",\n      displayName: \"Polygon Mumbai Testnet\",\n      blockExplorer: \"https://mumbai.polygonscan.com/\",\n      ticker: \"MATIC\",\n      tickerName: \"Polygon\",\n    };\n  }\n  if (chainId === 56) {\n    return {\n      chainNamespace,\n      chainId: \"0x38\",\n      rpcTarget: \"https://rpc.ankr.com/bsc\",\n      displayName: \"Binance SmartChain Mainnet\",\n      blockExplorer: \"https://bscscan.com\",\n      ticker: \"BNB\",\n      tickerName: \"Binance SmartChain\",\n    };\n  }\n  if (chainId === 97) {\n    return {\n      chainNamespace,\n      chainId: \"0x61\",\n      rpcTarget: \"https://rpc.ankr.com/bsc_testnet_chapel\",\n      displayName: \"Binance SmartChain Testnet\",\n      blockExplorer: \"https://testnet.bscscan.com\",\n      ticker: \"BNB\",\n      tickerName: \"Binance SmartChain\",\n    };\n  }\n  if (chainId === 25) {\n    return {\n      chainNamespace,\n      chainId: \"0x19\",\n      rpcTarget: \"https://rpc.cronos.org\",\n      displayName: \"Cronos Mainnet\",\n      blockExplorer: \"https://cronoscan.com/\",\n      ticker: \"CRO\",\n      tickerName: \"Cronos\",\n    };\n  }\n  if (chainId === 338) {\n    return {\n      chainNamespace,\n      chainId: \"0x152\",\n      rpcTarget: \"https://rpc-t3.cronos.org/\",\n      displayName: \"Cronos Testnet\",\n      blockExplorer: \"https://cronoscan.com/\",\n      ticker: \"CRO\",\n      tickerName: \"Cronos\",\n    };\n  }\n  if (chainId === 8217) {\n    return {\n      chainNamespace,\n      chainId: \"0x2019\",\n      rpcTarget: \"https://public-node-api.klaytnapi.com/v1/cypress\",\n      displayName: \"Klaytn Mainnet\",\n      blockExplorer: \"https://scope.klaytn.com\",\n      ticker: \"KLAY\",\n      tickerName: \"Klaytn\",\n    };\n  }\n\n  return null;\n};\n\nexport const getSolanaChainConfig = (chainId: number): CustomChainConfig | null => {\n  const chainNamespace = CHAIN_NAMESPACES.SOLANA;\n  if (chainId === 1) {\n    return {\n      chainNamespace,\n      chainId: \"0x1\",\n      rpcTarget: \"https://rpc.ankr.com/solana\",\n      displayName: \"Solana Mainnet\",\n      blockExplorer: \"https://explorer.solana.com\",\n      ticker: \"SOL\",\n      tickerName: \"Solana\",\n    };\n  } else if (chainId === 2) {\n    return {\n      chainNamespace,\n      chainId: \"0x2\",\n      rpcTarget: \"https://api.testnet.solana.com\",\n      displayName: \"Solana Testnet\",\n      blockExplorer: \"https://explorer.solana.com?cluster=testnet\",\n      ticker: \"SOL\",\n      tickerName: \"Solana\",\n    };\n  } else if (chainId === 3) {\n    return {\n      chainNamespace,\n      chainId: \"0x3\",\n      rpcTarget: \"https://api.devnet.solana.com\",\n      displayName: \"Solana Devnet\",\n      blockExplorer: \"https://explorer.solana.com?cluster=devnet\",\n      ticker: \"SOL\",\n      tickerName: \"Solana\",\n    };\n  }\n\n  return null;\n};\n\nexport const getChainConfig = (chainNamespace: ChainNamespaceType, chainId?: number | string): CustomChainConfig | null => {\n  if (chainNamespace === CHAIN_NAMESPACES.OTHER) return null;\n  const finalChainId = chainId ? (typeof chainId === \"number\" ? chainId : parseInt(chainId, 16)) : getDefaultNetworkId(chainNamespace);\n  if (chainNamespace === CHAIN_NAMESPACES.EIP155) {\n    return getEvmChainConfig(finalChainId);\n  } else if (chainNamespace === CHAIN_NAMESPACES.SOLANA) {\n    return getSolanaChainConfig(finalChainId);\n  }\n  return null;\n};\n","import { CustomError } from \"ts-custom-error\";\n\n// @flow\nexport interface IWeb3AuthError extends CustomError {\n  code: number;\n  message: string;\n  toString(): string;\n}\n\nexport type ErrorCodes = {\n  [key: number]: string;\n};\n\nexport abstract class Web3AuthError extends CustomError implements IWeb3AuthError {\n  code: number;\n\n  message: string;\n\n  public constructor(code: number, message?: string) {\n    // takes care of stack and proto\n    super(message);\n\n    this.code = code;\n    this.message = message || \"\";\n    // Set name explicitly as minification can mangle class names\n    Object.defineProperty(this, \"name\", { value: \"Web3AuthError\" });\n  }\n\n  toJSON(): IWeb3AuthError {\n    return {\n      name: this.name,\n      code: this.code,\n      message: this.message,\n    };\n  }\n\n  toString(): string {\n    return JSON.stringify(this.toJSON());\n  }\n}\n\nexport class WalletInitializationError extends Web3AuthError {\n  protected static messages: ErrorCodes = {\n    5000: \"Custom\",\n    5001: \"Wallet is not found\",\n    5002: \"Wallet is not installed\",\n    5003: \"Wallet is not ready yet\",\n    5004: \"Wallet window is blocked\",\n    5005: \"Wallet window has been closed by the user\",\n    5006: \"Incompatible chain namespace provided\",\n    5007: \"Adapter has already been included\",\n    5008: \"Invalid provider Config\",\n    5009: \"Provider is not ready yet\",\n    5010: \"Failed to connect with rpc url\",\n    5011: \"Invalid params passed in\",\n    5013: \"Invalid network provided\",\n  };\n\n  public constructor(code: number, message?: string) {\n    // takes care of stack and proto\n    super(code, message);\n\n    // Set name explicitly as minification can mangle class names\n    Object.defineProperty(this, \"name\", { value: \"WalletInitializationError\" });\n  }\n\n  public static fromCode(code: number, extraMessage = \"\"): IWeb3AuthError {\n    return new WalletInitializationError(code, `${WalletInitializationError.messages[code]}, ${extraMessage}`);\n  }\n\n  // Custom methods\n  public static notFound(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5001, extraMessage);\n  }\n\n  public static notInstalled(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5002, extraMessage);\n  }\n\n  public static notReady(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5003, extraMessage);\n  }\n\n  public static windowBlocked(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5004, extraMessage);\n  }\n\n  public static windowClosed(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5005, extraMessage);\n  }\n\n  public static incompatibleChainNameSpace(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5006, extraMessage);\n  }\n\n  public static duplicateAdapterError(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5007, extraMessage);\n  }\n\n  public static invalidProviderConfigError(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5008, extraMessage);\n  }\n\n  public static providerNotReadyError(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5009, extraMessage);\n  }\n\n  public static rpcConnectionError(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5010, extraMessage);\n  }\n\n  public static invalidParams(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5011, extraMessage);\n  }\n\n  public static invalidNetwork(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5013, extraMessage);\n  }\n}\n\n/**\n * wallet login errors\n */\n\nexport class WalletLoginError extends Web3AuthError {\n  protected static messages: ErrorCodes = {\n    5000: \"Custom\",\n    5111: \"Failed to connect with wallet\",\n    5112: \"Failed to disconnect from wallet\",\n    5113: \"Wallet is not connected\",\n    5114: \"Wallet popup has been closed by the user\",\n  };\n\n  public constructor(code: number, message?: string) {\n    // takes care of stack and proto\n    super(code, message);\n\n    // Set name explicitly as minification can mangle class names\n    Object.defineProperty(this, \"name\", { value: \"WalletLoginError\" });\n  }\n\n  public static fromCode(code: number, extraMessage = \"\"): IWeb3AuthError {\n    return new WalletLoginError(code, `${WalletLoginError.messages[code]}${extraMessage}`);\n  }\n\n  public static connectionError(extraMessage = \"\"): IWeb3AuthError {\n    return WalletLoginError.fromCode(5111, extraMessage);\n  }\n\n  public static disconnectionError(extraMessage = \"\"): IWeb3AuthError {\n    return WalletLoginError.fromCode(5112, extraMessage);\n  }\n\n  public static notConnectedError(extraMessage = \"\"): IWeb3AuthError {\n    return WalletLoginError.fromCode(5113, extraMessage);\n  }\n\n  public static popupClosed(extraMessage = \"\"): IWeb3AuthError {\n    return WalletLoginError.fromCode(5114, extraMessage);\n  }\n}\n","export const MULTI_CHAIN_ADAPTERS = {\n  OPENLOGIN: \"openlogin\",\n  WALLET_CONNECT_V1: \"wallet-connect-v1\",\n  WALLET_CONNECT_V2: \"wallet-connect-v2\",\n};\n\nexport const SOLANA_ADAPTERS = {\n  TORUS_SOLANA: \"torus-solana\",\n  PHANTOM: \"phantom\",\n  SOLLET: \"sollet\",\n  SOLLET_EXTENSION: \"sollet-extension\",\n  SOLFLARE: \"solflare\",\n  SLOPE: \"slope\",\n  ...MULTI_CHAIN_ADAPTERS,\n};\n\nexport const EVM_ADAPTERS = {\n  TORUS_EVM: \"torus-evm\",\n  METAMASK: \"metamask\",\n  COINBASE: \"coinbase\",\n  ...MULTI_CHAIN_ADAPTERS,\n};\n\nexport const WALLET_ADAPTERS = {\n  ...EVM_ADAPTERS,\n  ...SOLANA_ADAPTERS,\n};\nexport type WALLET_ADAPTER_TYPE = typeof WALLET_ADAPTERS[keyof typeof WALLET_ADAPTERS];\nexport type SOLANA_ADAPTER_TYPE = typeof SOLANA_ADAPTERS[keyof typeof SOLANA_ADAPTERS];\nexport type EVM_ADAPTER_TYPE = typeof EVM_ADAPTERS[keyof typeof EVM_ADAPTERS];\nexport type MULTI_CHAIN_ADAPTER_TYPE = typeof MULTI_CHAIN_ADAPTERS[keyof typeof MULTI_CHAIN_ADAPTERS];\n","import type { OpenloginUserInfo } from \"@toruslabs/openlogin\";\nimport { SafeEventEmitter } from \"@toruslabs/openlogin-jrpc\";\n\nimport { getChainConfig } from \"../chain/config\";\nimport { AdapterNamespaceType, ChainNamespaceType, CustomChainConfig } from \"../chain/IChainInterface\";\nimport { WalletInitializationError, WalletLoginError } from \"../errors\";\nimport { SafeEventEmitterProvider } from \"../provider/IProvider\";\nimport { WALLET_ADAPTERS } from \"../wallet\";\n\nexport type UserInfo = OpenloginUserInfo;\n\nexport const ADAPTER_CATEGORY = {\n  EXTERNAL: \"external\",\n  IN_APP: \"in_app\",\n} as const;\nexport type ADAPTER_CATEGORY_TYPE = typeof ADAPTER_CATEGORY[keyof typeof ADAPTER_CATEGORY];\n\nexport interface AdapterInitOptions {\n  /**\n   * Whether to auto connect to the adapter based on redirect mode or saved adapters\n   */\n  autoConnect?: boolean;\n}\n\nexport const ADAPTER_STATUS = {\n  NOT_READY: \"not_ready\",\n  READY: \"ready\",\n  CONNECTING: \"connecting\",\n  CONNECTED: \"connected\",\n  DISCONNECTED: \"disconnected\",\n  ERRORED: \"errored\",\n} as const;\n\nexport const ADAPTER_EVENTS = {\n  ...ADAPTER_STATUS,\n  ADAPTER_DATA_UPDATED: \"adapter_data_updated\",\n} as const;\nexport type ADAPTER_STATUS_TYPE = typeof ADAPTER_STATUS[keyof typeof ADAPTER_STATUS];\n\nexport type CONNECTED_EVENT_DATA = {\n  adapter: string;\n  reconnected: boolean;\n};\n\nexport type UserAuthInfo = { idToken: string };\nexport interface IAdapter<T> extends SafeEventEmitter {\n  adapterNamespace: AdapterNamespaceType;\n  currentChainNamespace: ChainNamespaceType;\n  chainConfigProxy: CustomChainConfig | null;\n  type: ADAPTER_CATEGORY_TYPE;\n  name: string;\n  sessionTime: number;\n  status: ADAPTER_STATUS_TYPE;\n  provider: SafeEventEmitterProvider | null;\n  adapterData?: unknown;\n  init(options?: AdapterInitOptions): Promise<void>;\n  disconnect(options?: { cleanup: boolean }): Promise<void>;\n  connect(params?: T): Promise<SafeEventEmitterProvider | null>;\n  getUserInfo(): Promise<Partial<UserInfo>>;\n  setChainConfig(customChainConfig: CustomChainConfig): void;\n  setAdapterSettings(adapterSettings: unknown): void;\n  authenticateUser(): Promise<UserAuthInfo>;\n}\n\nexport abstract class BaseAdapter<T> extends SafeEventEmitter implements IAdapter<T> {\n  public adapterData?: unknown = {};\n\n  public sessionTime = 86400;\n\n  // should be added in constructor or from setChainConfig function\n  // before calling init function.\n  protected chainConfig: CustomChainConfig | null = null;\n\n  public abstract clientId: string;\n\n  public abstract adapterNamespace: AdapterNamespaceType;\n\n  public abstract currentChainNamespace: ChainNamespaceType;\n\n  public abstract type: ADAPTER_CATEGORY_TYPE;\n\n  public abstract name: string;\n\n  public abstract status: ADAPTER_STATUS_TYPE;\n\n  get chainConfigProxy(): CustomChainConfig | null {\n    return this.chainConfig ? { ...this.chainConfig } : null;\n  }\n\n  public abstract get provider(): SafeEventEmitterProvider | null;\n\n  setChainConfig(customChainConfig: CustomChainConfig): void {\n    if (this.status === ADAPTER_STATUS.READY) return;\n    if (!customChainConfig.chainNamespace) throw WalletInitializationError.notReady(\"ChainNamespace is required while setting chainConfig\");\n    const defaultChainConfig = getChainConfig(customChainConfig.chainNamespace, customChainConfig.chainId);\n    this.chainConfig = { ...defaultChainConfig, ...customChainConfig };\n  }\n\n  setAdapterSettings(_: unknown): void {}\n\n  checkConnectionRequirements(): void {\n    // we reconnect without killing existing wallet connect session on calling connect again.\n    if (this.name === WALLET_ADAPTERS.WALLET_CONNECT_V1 && this.status === ADAPTER_STATUS.CONNECTING) return;\n    else if (this.status === ADAPTER_STATUS.CONNECTING) throw WalletInitializationError.notReady(\"Already connecting\");\n\n    if (this.status === ADAPTER_STATUS.CONNECTED) throw WalletLoginError.connectionError(\"Already connected\");\n    if (this.status !== ADAPTER_STATUS.READY)\n      throw WalletLoginError.connectionError(\n        \"Wallet adapter is not ready yet, Please wait for init function to resolve before calling connect/connectTo function\"\n      );\n    if (!this.clientId) throw WalletLoginError.connectionError(\"Please initialize Web3Auth with a valid clientId in constructor\");\n  }\n\n  checkInitializationRequirements(): void {\n    if (this.status === ADAPTER_STATUS.NOT_READY) return;\n    if (this.status === ADAPTER_STATUS.CONNECTED) throw WalletInitializationError.notReady(\"Already connected\");\n    if (this.status === ADAPTER_STATUS.READY) throw WalletInitializationError.notReady(\"Adapter is already initialized\");\n  }\n\n  updateAdapterData(data: unknown): void {\n    this.adapterData = data;\n    this.emit(ADAPTER_EVENTS.ADAPTER_DATA_UPDATED, { adapterName: this.name, data });\n  }\n\n  abstract init(options?: AdapterInitOptions): Promise<void>;\n  abstract connect(params?: T): Promise<SafeEventEmitterProvider | null>;\n  abstract disconnect(): Promise<void>;\n  abstract getUserInfo(): Promise<Partial<UserInfo>>;\n  abstract authenticateUser(): Promise<UserAuthInfo>;\n}\n\nexport interface BaseAdapterConfig {\n  label: string;\n  showOnModal?: boolean;\n  showOnMobile?: boolean;\n  showOnDesktop?: boolean;\n}\n\nexport type LoginMethodConfig = Record<\n  string,\n  {\n    /**\n     * Display Name. If not provided, we use the default for openlogin app\n     */\n    name: string;\n    /**\n     * Description for button. If provided, it renders as a full length button. else, icon button\n     */\n    description?: string;\n    /**\n     * Logo to be shown on mouse hover. If not provided, we use the default for openlogin app\n     */\n    logoHover?: string;\n    /**\n     * Logo to be shown on dark background (dark theme). If not provided, we use the default for openlogin app\n     */\n    logoLight?: string;\n    /**\n     * Logo to be shown on light background (light theme). If not provided, we use the default for openlogin app\n     */\n    logoDark?: string;\n    /**\n     * Show login button on the main list\n     */\n    mainOption?: boolean;\n    /**\n     * Whether to show the login button on modal or not\n     */\n    showOnModal?: boolean;\n    /**\n     * Whether to show the login button on desktop\n     */\n    showOnDesktop?: boolean;\n    /**\n     * Whether to show the login button on mobile\n     */\n    showOnMobile?: boolean;\n  }\n>;\n\nexport interface IWalletConnectExtensionAdapter {\n  name: string;\n  chains: ChainNamespaceType[];\n  logo: string;\n  mobile: {\n    native: string;\n    universal: string;\n  };\n  desktop: {\n    native: string;\n    universal: string;\n  };\n}\n\nexport interface WalletConnectV1Data {\n  uri: string;\n  extensionAdapters: IWalletConnectExtensionAdapter[];\n}\n\nexport interface IAdapterDataEvent {\n  adapterName: string;\n  data: unknown;\n}\n\nexport interface INetworkSwitchProvider {\n  addChain(chainConfig: CustomChainConfig): Promise<void>;\n  switchChain(chainId: string): Promise<void>;\n}\nexport interface INetworkSwitch {\n  addNetwork(params: { chainConfig: CustomChainConfig; appOrigin: string }): Promise<boolean>;\n  switchNetwork(params: { currentChainConfig: CustomChainConfig; newChainConfig: Partial<CustomChainConfig>; appOrigin: string }): Promise<boolean>;\n}\n\nexport abstract class BaseNetworkSwitch implements INetworkSwitch {\n  abstract switchNetwork(params: {\n    currentChainConfig: CustomChainConfig;\n    newChainConfig: Partial<CustomChainConfig>;\n    appOrigin: string;\n  }): Promise<boolean>;\n\n  abstract addNetwork(params: { chainConfig: CustomChainConfig; appOrigin: string }): Promise<boolean>;\n}\n","import loglevel from \"loglevel\";\n\nexport default loglevel.getLogger(\"web3auth-logger\");\n","import { OPENLOGIN_NETWORK, UX_MODE } from \"@toruslabs/openlogin\";\nimport { ChainNamespaceType, getChainConfig } from \"@web3auth/base\";\n\nimport { OpenloginAdapterOptions } from \"./interface\";\n\nexport const getOpenloginDefaultOptions = (chainNamespace?: ChainNamespaceType, chainId?: number | string): OpenloginAdapterOptions => {\n  return {\n    adapterSettings: {\n      network: OPENLOGIN_NETWORK.MAINNET,\n      clientId: \"\",\n      uxMode: UX_MODE.POPUP,\n    },\n    chainConfig: chainNamespace ? getChainConfig(chainNamespace, chainId) : null,\n    loginSettings: {},\n  };\n};\n","import OpenLogin, { getHashQueryParams, LoginParams, OPENLOGIN_NETWORK, OpenLoginOptions, SUPPORTED_KEY_CURVES, UX_MODE } from \"@toruslabs/openlogin\";\nimport {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterInitOptions,\n  AdapterNamespaceType,\n  BaseAdapter,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  log,\n  SafeEventEmitterProvider,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletInitializationError,\n  WalletLoginError,\n} from \"@web3auth/base\";\nimport { CommonPrivateKeyProvider, IBaseProvider } from \"@web3auth/base-provider\";\nimport merge from \"lodash.merge\";\n\nimport { getOpenloginDefaultOptions } from \"./config\";\nimport type { LoginSettings, OpenloginAdapterOptions } from \"./interface\";\n\nexport type OpenloginLoginParams = LoginParams & {\n  // to maintain backward compatibility\n  login_hint?: string;\n};\n\ntype PrivateKeyProvider = IBaseProvider<string>;\n\nexport class OpenloginAdapter extends BaseAdapter<OpenloginLoginParams> {\n  readonly name: string = WALLET_ADAPTERS.OPENLOGIN;\n\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.MULTICHAIN;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.IN_APP;\n\n  public openloginInstance: OpenLogin | null = null;\n\n  public clientId: string;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  public currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.EIP155;\n\n  private openloginOptions: OpenLoginOptions;\n\n  private loginSettings: LoginSettings = {};\n\n  private privKeyProvider: PrivateKeyProvider | null = null;\n\n  constructor(params: OpenloginAdapterOptions) {\n    super();\n    log.debug(\"const openlogin adapter\", params);\n    const defaultOptions = getOpenloginDefaultOptions(params.chainConfig?.chainNamespace, params.chainConfig?.chainId);\n    this.openloginOptions = {\n      clientId: \"\",\n      network: OPENLOGIN_NETWORK.MAINNET,\n      ...defaultOptions.adapterSettings,\n      ...(params.adapterSettings || {}),\n    };\n    this.clientId = params.adapterSettings?.clientId as string;\n    this.loginSettings = { ...defaultOptions.loginSettings, ...params.loginSettings };\n    this.sessionTime = this.loginSettings.sessionTime || 86400;\n    // if no chainNamespace is passed then chain config should be set before calling init\n    if (params.chainConfig?.chainNamespace) {\n      this.currentChainNamespace = params.chainConfig?.chainNamespace;\n      const defaultChainIdConfig = defaultOptions.chainConfig ? defaultOptions.chainConfig : {};\n      this.chainConfig = { ...defaultChainIdConfig, ...params?.chainConfig };\n      log.debug(\"const openlogin chainConfig\", this.chainConfig);\n      if (!this.chainConfig.rpcTarget && params.chainConfig.chainNamespace !== CHAIN_NAMESPACES.OTHER) {\n        throw WalletInitializationError.invalidParams(\"rpcTarget is required in chainConfig\");\n      }\n    }\n  }\n\n  get chainConfigProxy(): CustomChainConfig | null {\n    return this.chainConfig ? { ...this.chainConfig } : null;\n  }\n\n  get provider(): SafeEventEmitterProvider | null {\n    return this.privKeyProvider?.provider || null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options: AdapterInitOptions): Promise<void> {\n    super.checkInitializationRequirements();\n    if (!this.openloginOptions?.clientId) throw WalletInitializationError.invalidParams(\"clientId is required before openlogin's initialization\");\n    if (!this.chainConfig) throw WalletInitializationError.invalidParams(\"chainConfig is required before initialization\");\n    let isRedirectResult = false;\n\n    if (this.openloginOptions.uxMode === UX_MODE.REDIRECT) {\n      const redirectResult = getHashQueryParams();\n      if (Object.keys(redirectResult).length > 0 && redirectResult._pid) {\n        isRedirectResult = true;\n      }\n    }\n    this.openloginOptions = {\n      ...this.openloginOptions,\n      replaceUrlOnRedirect: isRedirectResult,\n    };\n    this.openloginInstance = new OpenLogin(this.openloginOptions);\n    log.debug(\"initializing openlogin adapter init\");\n\n    await this.openloginInstance.init();\n\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.OPENLOGIN);\n\n    try {\n      log.debug(\"initializing openlogin adapter\");\n      // connect only if it is redirect result or if connect (adapter is cached/already connected in same session) is true\n      if (this.openloginInstance.privKey && (options.autoConnect || isRedirectResult)) {\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached openlogin provider\", error);\n      this.emit(\"ERRORED\", error);\n    }\n  }\n\n  async connect(params?: OpenloginLoginParams): Promise<SafeEventEmitterProvider | null> {\n    super.checkConnectionRequirements();\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, { ...params, adapter: WALLET_ADAPTERS.OPENLOGIN });\n    try {\n      await this.connectWithProvider(params);\n      return this.provider;\n    } catch (error: unknown) {\n      log.error(\"Failed to connect with openlogin provider\", error);\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      if ((error as Error)?.message.includes(\"user closed popup\")) {\n        throw WalletLoginError.popupClosed();\n      }\n      throw WalletLoginError.connectionError(\"Failed to login with openlogin\");\n    }\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.openloginInstance) throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n    await this.openloginInstance.logout();\n    if (options.cleanup) {\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.openloginInstance = null;\n      this.privKeyProvider = null;\n    } else {\n      // ready to be connected again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async authenticateUser(): Promise<{ idToken: string }> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    const userInfo = await this.getUserInfo();\n    return {\n      idToken: userInfo.idToken as string,\n    };\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.openloginInstance) throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n    const userInfo = await this.openloginInstance.getUserInfo();\n    return userInfo;\n  }\n\n  // should be called only before initialization.\n  setAdapterSettings(adapterSettings: OpenLoginOptions & { sessionTime: number }): void {\n    if (this.status === ADAPTER_STATUS.READY) return;\n    const defaultOptions = getOpenloginDefaultOptions();\n    this.openloginOptions = { ...defaultOptions.adapterSettings, ...(this.openloginOptions || {}), ...adapterSettings };\n    if (adapterSettings.sessionTime) {\n      this.loginSettings = { ...this.loginSettings, sessionTime: adapterSettings.sessionTime };\n    }\n    if (adapterSettings.clientId) {\n      this.clientId = adapterSettings.clientId;\n    }\n  }\n\n  // should be called only before initialization.\n  setChainConfig(customChainConfig: CustomChainConfig): void {\n    super.setChainConfig(customChainConfig);\n    this.currentChainNamespace = customChainConfig.chainNamespace;\n  }\n\n  private async connectWithProvider(params?: OpenloginLoginParams): Promise<void> {\n    if (!this.chainConfig) throw WalletInitializationError.invalidParams(\"chainConfig is required before initialization\");\n    if (!this.openloginInstance) throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n\n    if (this.currentChainNamespace === CHAIN_NAMESPACES.SOLANA) {\n      const { SolanaPrivateKeyProvider } = await import(\"@web3auth/solana-provider\");\n      this.privKeyProvider = new SolanaPrivateKeyProvider({ config: { chainConfig: this.chainConfig } });\n    } else if (this.currentChainNamespace === CHAIN_NAMESPACES.EIP155) {\n      const { EthereumPrivateKeyProvider } = await import(\"@web3auth/ethereum-provider\");\n      this.privKeyProvider = new EthereumPrivateKeyProvider({ config: { chainConfig: this.chainConfig } });\n    } else if (this.currentChainNamespace === CHAIN_NAMESPACES.OTHER) {\n      this.privKeyProvider = new CommonPrivateKeyProvider();\n    } else {\n      throw new Error(`Invalid chainNamespace: ${this.currentChainNamespace} found while connecting to wallet`);\n    }\n    // if not logged in then login\n    if (!this.openloginInstance.privKey && params) {\n      if (!this.loginSettings.curve) {\n        this.loginSettings.curve =\n          this.currentChainNamespace === CHAIN_NAMESPACES.SOLANA ? SUPPORTED_KEY_CURVES.ED25519 : SUPPORTED_KEY_CURVES.SECP256K1;\n      }\n      await this.openloginInstance.login(\n        merge(\n          this.loginSettings,\n          { loginProvider: params.loginProvider },\n          { extraLoginOptions: { ...(params.extraLoginOptions || {}), login_hint: params.login_hint || params.extraLoginOptions?.login_hint } }\n        )\n      );\n    }\n    let finalPrivKey = this.openloginInstance.privKey;\n    if (finalPrivKey) {\n      if (this.currentChainNamespace === CHAIN_NAMESPACES.SOLANA) {\n        const { getED25519Key } = await import(\"@toruslabs/openlogin-ed25519\");\n        finalPrivKey = getED25519Key(finalPrivKey).sk.toString(\"hex\");\n      }\n      await this.privKeyProvider.setupProvider(finalPrivKey);\n      this.status = ADAPTER_STATUS.CONNECTED;\n      this.emit(ADAPTER_EVENTS.CONNECTED, { adapter: WALLET_ADAPTERS.OPENLOGIN, reconnected: !params } as CONNECTED_EVENT_DATA);\n    }\n  }\n}\n"],"names":["CHAIN_NAMESPACES","ADAPTER_NAMESPACES","getChainConfig","chainNamespace","chainId","finalChainId","parseInt","Error","getDefaultNetworkId","rpcTarget","displayName","blockExplorer","ticker","tickerName","getEvmChainConfig","getSolanaChainConfig","Web3AuthError","_inherits","code","message","_classCallCheck","_this","_defineProperty","Object","defineProperty","_assertThisInitialized","value","_createClass","key","name","this","JSON","stringify","toJSON","CustomError","WalletInitializationError","_this2","extraMessage","messages","concat","fromCode","WalletLoginError","_this3","MULTI_CHAIN_ADAPTERS","OPENLOGIN","WALLET_CONNECT_V1","WALLET_CONNECT_V2","SOLANA_ADAPTERS","TORUS_SOLANA","PHANTOM","SOLLET","SOLLET_EXTENSION","SOLFLARE","SLOPE","EVM_ADAPTERS","TORUS_EVM","METAMASK","COINBASE","WALLET_ADAPTERS","ADAPTER_CATEGORY","ADAPTER_STATUS","NOT_READY","READY","CONNECTING","CONNECTED","DISCONNECTED","ERRORED","ADAPTER_EVENTS","ADAPTER_DATA_UPDATED","BaseAdapter","args","get","chainConfig","customChainConfig","status","notReady","defaultChainConfig","_","connectionError","clientId","data","adapterData","emit","adapterName","SafeEventEmitter","loglevel","getOpenloginDefaultOptions","adapterSettings","network","OPENLOGIN_NETWORK","uxMode","UX_MODE","loginSettings","OpenloginAdapter","params","log","debug","defaultOptions","_params$chainConfig","_params$chainConfig2","openloginOptions","_params$adapterSettin","sessionTime","_params$chainConfig3","currentChainNamespace","_params$chainConfig4","defaultChainIdConfig","invalidParams","provider","privKeyProvider","set","options","_get","_this$openloginOption","_context","isRedirectResult","redirectResult","getHashQueryParams","keys","length","_pid","_objectSpread","replaceUrlOnRedirect","openloginInstance","OpenLogin","init","privKey","autoConnect","connect","error","adapter","_context2","connectWithProvider","includes","popupClosed","_disconnect","_args3","cleanup","_context3","notConnectedError","logout","_authenticateUser","_context4","getUserInfo","userInfo","idToken","_getUserInfo","_context5","_context6","_yield$import","SolanaPrivateKeyProvider","config","_yield$import2","EthereumPrivateKeyProvider","CommonPrivateKeyProvider","curve","SUPPORTED_KEY_CURVES","login","merge","loginProvider","extraLoginOptions","login_hint","_params$extraLoginOpt","finalPrivKey","_yield$import3","getED25519Key","sk","toString","setupProvider","reconnected"],"sourceRoot":""}