{"version":3,"file":"static/js/859.65619fbf.chunk.js","mappings":"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","sources":["../../src/index.ts","../node_modules/@web3auth/metamask-adapter/node_modules/@web3auth/base/src/chain/IChainInterface.ts","../node_modules/@web3auth/metamask-adapter/node_modules/@web3auth/base/src/chain/config.ts","../node_modules/@web3auth/metamask-adapter/node_modules/@web3auth/base/src/errors/index.ts","../node_modules/@web3auth/metamask-adapter/node_modules/@web3auth/base/src/wallet/index.ts","../node_modules/@web3auth/metamask-adapter/node_modules/@web3auth/base/src/adapter/IAdapter.ts","../node_modules/@web3auth/metamask-adapter/node_modules/@web3auth/base/src/loglevel.ts","../node_modules/@web3auth/metamask-adapter/src/metamaskAdapter.ts"],"sourcesContent":[null,"export const CHAIN_NAMESPACES = {\n  EIP155: \"eip155\",\n  SOLANA: \"solana\",\n  OTHER: \"other\",\n} as const;\n// eip155 for all evm chains\nexport type ChainNamespaceType = typeof CHAIN_NAMESPACES[keyof typeof CHAIN_NAMESPACES];\n\nexport const ADAPTER_NAMESPACES = {\n  EIP155: \"eip155\",\n  SOLANA: \"solana\",\n  MULTICHAIN: \"multichain\",\n} as const;\n// eip155 for all evm chains\nexport type AdapterNamespaceType = typeof ADAPTER_NAMESPACES[keyof typeof ADAPTER_NAMESPACES];\n\nexport type CustomChainConfig = {\n  chainNamespace: ChainNamespaceType;\n  /**\n   * The chain id of the chain\n   */\n  chainId: string;\n  /**\n   * RPC target Url for the chain\n   */\n  rpcTarget: string;\n  /**\n   * Display Name for the chain\n   */\n  displayName: string;\n  /**\n   * Url of the block explorer\n   */\n  blockExplorer: string;\n  /**\n   * Default currency ticker of the network (e.g: ETH)\n   */\n  ticker: string;\n  /**\n   * Name for currency ticker (e.g: `Ethereum`)\n   */\n  tickerName: string;\n};\n","import { CHAIN_NAMESPACES, ChainNamespaceType, CustomChainConfig } from \"./IChainInterface\";\nconst getDefaultNetworkId = (chainNamespace: ChainNamespaceType): number => {\n  if (chainNamespace === CHAIN_NAMESPACES.EIP155) {\n    return 1;\n  } else if (chainNamespace === CHAIN_NAMESPACES.SOLANA) {\n    return 1;\n  }\n  throw new Error(`Chain namespace ${chainNamespace} is not supported`);\n};\n\nexport const getEvmChainConfig = (chainId: number): CustomChainConfig | null => {\n  const chainNamespace = CHAIN_NAMESPACES.EIP155;\n  if (chainId === 1) {\n    return {\n      chainNamespace,\n      chainId: \"0x1\",\n      rpcTarget: `https://rpc.ankr.com/eth`,\n      displayName: \"Ethereum Mainnet\",\n      blockExplorer: \"https://etherscan.io/\",\n      ticker: \"ETH\",\n      tickerName: \"Ethereum\",\n    };\n  }\n  if (chainId === 3) {\n    return {\n      chainNamespace,\n      chainId: \"0x3\",\n      rpcTarget: `https://rpc.ankr.com/eth_ropsten`,\n      displayName: \"Ropsten Testnet\",\n      blockExplorer: \"https://ropsten.etherscan.io/\",\n      ticker: \"ETH\",\n      tickerName: \"Ethereum\",\n    };\n  }\n  if (chainId === 4) {\n    return {\n      chainNamespace,\n      chainId: \"0x4\",\n      rpcTarget: `https://rpc.ankr.com/eth_rinkeby`,\n      displayName: \"Rinkeby Testnet\",\n      blockExplorer: \"https://rinkeby.etherscan.io/\",\n      ticker: \"ETH\",\n      tickerName: \"Ethereum\",\n    };\n  }\n  if (chainId === 5) {\n    return {\n      chainNamespace,\n      chainId: \"0x5\",\n      rpcTarget: `https://rpc.ankr.com/eth_goerli`,\n      displayName: \"Goerli Testnet\",\n      blockExplorer: \"https://goerli.etherscan.io/\",\n      ticker: \"ETH\",\n      tickerName: \"Ethereum\",\n    };\n  }\n  if (chainId === 137) {\n    return {\n      chainNamespace,\n      chainId: \"0x89\",\n      rpcTarget: \"https://rpc.ankr.com/polygon\",\n      displayName: \"Polygon Mainnet\",\n      blockExplorer: \"https://polygonscan.com\",\n      ticker: \"MATIC\",\n      tickerName: \"Polygon\",\n    };\n  }\n  if (chainId === 80001) {\n    return {\n      chainNamespace,\n      chainId: \"0x13881\",\n      rpcTarget: \"https://rpc.ankr.com/polygon_mumbai\",\n      displayName: \"Polygon Mumbai Testnet\",\n      blockExplorer: \"https://mumbai.polygonscan.com/\",\n      ticker: \"MATIC\",\n      tickerName: \"Polygon\",\n    };\n  }\n  if (chainId === 56) {\n    return {\n      chainNamespace,\n      chainId: \"0x38\",\n      rpcTarget: \"https://rpc.ankr.com/bsc\",\n      displayName: \"Binance SmartChain Mainnet\",\n      blockExplorer: \"https://bscscan.com\",\n      ticker: \"BNB\",\n      tickerName: \"Binance SmartChain\",\n    };\n  }\n  if (chainId === 97) {\n    return {\n      chainNamespace,\n      chainId: \"0x61\",\n      rpcTarget: \"https://rpc.ankr.com/bsc_testnet_chapel\",\n      displayName: \"Binance SmartChain Testnet\",\n      blockExplorer: \"https://testnet.bscscan.com\",\n      ticker: \"BNB\",\n      tickerName: \"Binance SmartChain\",\n    };\n  }\n  if (chainId === 25) {\n    return {\n      chainNamespace,\n      chainId: \"0x19\",\n      rpcTarget: \"https://rpc.cronos.org\",\n      displayName: \"Cronos Mainnet\",\n      blockExplorer: \"https://cronoscan.com/\",\n      ticker: \"CRO\",\n      tickerName: \"Cronos\",\n    };\n  }\n  if (chainId === 338) {\n    return {\n      chainNamespace,\n      chainId: \"0x152\",\n      rpcTarget: \"https://rpc-t3.cronos.org/\",\n      displayName: \"Cronos Testnet\",\n      blockExplorer: \"https://cronoscan.com/\",\n      ticker: \"CRO\",\n      tickerName: \"Cronos\",\n    };\n  }\n  if (chainId === 8217) {\n    return {\n      chainNamespace,\n      chainId: \"0x2019\",\n      rpcTarget: \"https://public-node-api.klaytnapi.com/v1/cypress\",\n      displayName: \"Klaytn Mainnet\",\n      blockExplorer: \"https://scope.klaytn.com\",\n      ticker: \"KLAY\",\n      tickerName: \"Klaytn\",\n    };\n  }\n\n  return null;\n};\n\nexport const getSolanaChainConfig = (chainId: number): CustomChainConfig | null => {\n  const chainNamespace = CHAIN_NAMESPACES.SOLANA;\n  if (chainId === 1) {\n    return {\n      chainNamespace,\n      chainId: \"0x1\",\n      rpcTarget: \"https://rpc.ankr.com/solana\",\n      displayName: \"Solana Mainnet\",\n      blockExplorer: \"https://explorer.solana.com\",\n      ticker: \"SOL\",\n      tickerName: \"Solana\",\n    };\n  } else if (chainId === 2) {\n    return {\n      chainNamespace,\n      chainId: \"0x2\",\n      rpcTarget: \"https://api.testnet.solana.com\",\n      displayName: \"Solana Testnet\",\n      blockExplorer: \"https://explorer.solana.com?cluster=testnet\",\n      ticker: \"SOL\",\n      tickerName: \"Solana\",\n    };\n  } else if (chainId === 3) {\n    return {\n      chainNamespace,\n      chainId: \"0x3\",\n      rpcTarget: \"https://api.devnet.solana.com\",\n      displayName: \"Solana Devnet\",\n      blockExplorer: \"https://explorer.solana.com?cluster=devnet\",\n      ticker: \"SOL\",\n      tickerName: \"Solana\",\n    };\n  }\n\n  return null;\n};\n\nexport const getChainConfig = (chainNamespace: ChainNamespaceType, chainId?: number | string): CustomChainConfig | null => {\n  if (chainNamespace === CHAIN_NAMESPACES.OTHER) return null;\n  const finalChainId = chainId ? (typeof chainId === \"number\" ? chainId : parseInt(chainId, 16)) : getDefaultNetworkId(chainNamespace);\n  if (chainNamespace === CHAIN_NAMESPACES.EIP155) {\n    return getEvmChainConfig(finalChainId);\n  } else if (chainNamespace === CHAIN_NAMESPACES.SOLANA) {\n    return getSolanaChainConfig(finalChainId);\n  }\n  return null;\n};\n","import { CustomError } from \"ts-custom-error\";\n\n// @flow\nexport interface IWeb3AuthError extends CustomError {\n  code: number;\n  message: string;\n  toString(): string;\n}\n\nexport type ErrorCodes = {\n  [key: number]: string;\n};\n\nexport abstract class Web3AuthError extends CustomError implements IWeb3AuthError {\n  code: number;\n\n  message: string;\n\n  public constructor(code: number, message?: string) {\n    // takes care of stack and proto\n    super(message);\n\n    this.code = code;\n    this.message = message || \"\";\n    // Set name explicitly as minification can mangle class names\n    Object.defineProperty(this, \"name\", { value: \"Web3AuthError\" });\n  }\n\n  toJSON(): IWeb3AuthError {\n    return {\n      name: this.name,\n      code: this.code,\n      message: this.message,\n    };\n  }\n\n  toString(): string {\n    return JSON.stringify(this.toJSON());\n  }\n}\n\nexport class WalletInitializationError extends Web3AuthError {\n  protected static messages: ErrorCodes = {\n    5000: \"Custom\",\n    5001: \"Wallet is not found\",\n    5002: \"Wallet is not installed\",\n    5003: \"Wallet is not ready yet\",\n    5004: \"Wallet window is blocked\",\n    5005: \"Wallet window has been closed by the user\",\n    5006: \"Incompatible chain namespace provided\",\n    5007: \"Adapter has already been included\",\n    5008: \"Invalid provider Config\",\n    5009: \"Provider is not ready yet\",\n    5010: \"Failed to connect with rpc url\",\n    5011: \"Invalid params passed in\",\n    5013: \"Invalid network provided\",\n  };\n\n  public constructor(code: number, message?: string) {\n    // takes care of stack and proto\n    super(code, message);\n\n    // Set name explicitly as minification can mangle class names\n    Object.defineProperty(this, \"name\", { value: \"WalletInitializationError\" });\n  }\n\n  public static fromCode(code: number, extraMessage = \"\"): IWeb3AuthError {\n    return new WalletInitializationError(code, `${WalletInitializationError.messages[code]}, ${extraMessage}`);\n  }\n\n  // Custom methods\n  public static notFound(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5001, extraMessage);\n  }\n\n  public static notInstalled(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5002, extraMessage);\n  }\n\n  public static notReady(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5003, extraMessage);\n  }\n\n  public static windowBlocked(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5004, extraMessage);\n  }\n\n  public static windowClosed(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5005, extraMessage);\n  }\n\n  public static incompatibleChainNameSpace(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5006, extraMessage);\n  }\n\n  public static duplicateAdapterError(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5007, extraMessage);\n  }\n\n  public static invalidProviderConfigError(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5008, extraMessage);\n  }\n\n  public static providerNotReadyError(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5009, extraMessage);\n  }\n\n  public static rpcConnectionError(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5010, extraMessage);\n  }\n\n  public static invalidParams(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5011, extraMessage);\n  }\n\n  public static invalidNetwork(extraMessage = \"\"): IWeb3AuthError {\n    return WalletInitializationError.fromCode(5013, extraMessage);\n  }\n}\n\n/**\n * wallet login errors\n */\n\nexport class WalletLoginError extends Web3AuthError {\n  protected static messages: ErrorCodes = {\n    5000: \"Custom\",\n    5111: \"Failed to connect with wallet\",\n    5112: \"Failed to disconnect from wallet\",\n    5113: \"Wallet is not connected\",\n    5114: \"Wallet popup has been closed by the user\",\n  };\n\n  public constructor(code: number, message?: string) {\n    // takes care of stack and proto\n    super(code, message);\n\n    // Set name explicitly as minification can mangle class names\n    Object.defineProperty(this, \"name\", { value: \"WalletLoginError\" });\n  }\n\n  public static fromCode(code: number, extraMessage = \"\"): IWeb3AuthError {\n    return new WalletLoginError(code, `${WalletLoginError.messages[code]}${extraMessage}`);\n  }\n\n  public static connectionError(extraMessage = \"\"): IWeb3AuthError {\n    return WalletLoginError.fromCode(5111, extraMessage);\n  }\n\n  public static disconnectionError(extraMessage = \"\"): IWeb3AuthError {\n    return WalletLoginError.fromCode(5112, extraMessage);\n  }\n\n  public static notConnectedError(extraMessage = \"\"): IWeb3AuthError {\n    return WalletLoginError.fromCode(5113, extraMessage);\n  }\n\n  public static popupClosed(extraMessage = \"\"): IWeb3AuthError {\n    return WalletLoginError.fromCode(5114, extraMessage);\n  }\n}\n","export const MULTI_CHAIN_ADAPTERS = {\n  OPENLOGIN: \"openlogin\",\n  WALLET_CONNECT_V1: \"wallet-connect-v1\",\n  WALLET_CONNECT_V2: \"wallet-connect-v2\",\n};\n\nexport const SOLANA_ADAPTERS = {\n  TORUS_SOLANA: \"torus-solana\",\n  PHANTOM: \"phantom\",\n  SOLLET: \"sollet\",\n  SOLLET_EXTENSION: \"sollet-extension\",\n  SOLFLARE: \"solflare\",\n  SLOPE: \"slope\",\n  ...MULTI_CHAIN_ADAPTERS,\n};\n\nexport const EVM_ADAPTERS = {\n  TORUS_EVM: \"torus-evm\",\n  METAMASK: \"metamask\",\n  COINBASE: \"coinbase\",\n  ...MULTI_CHAIN_ADAPTERS,\n};\n\nexport const WALLET_ADAPTERS = {\n  ...EVM_ADAPTERS,\n  ...SOLANA_ADAPTERS,\n};\nexport type WALLET_ADAPTER_TYPE = typeof WALLET_ADAPTERS[keyof typeof WALLET_ADAPTERS];\nexport type SOLANA_ADAPTER_TYPE = typeof SOLANA_ADAPTERS[keyof typeof SOLANA_ADAPTERS];\nexport type EVM_ADAPTER_TYPE = typeof EVM_ADAPTERS[keyof typeof EVM_ADAPTERS];\nexport type MULTI_CHAIN_ADAPTER_TYPE = typeof MULTI_CHAIN_ADAPTERS[keyof typeof MULTI_CHAIN_ADAPTERS];\n","import type { OpenloginUserInfo } from \"@toruslabs/openlogin\";\nimport { SafeEventEmitter } from \"@toruslabs/openlogin-jrpc\";\n\nimport { getChainConfig } from \"../chain/config\";\nimport { AdapterNamespaceType, ChainNamespaceType, CustomChainConfig } from \"../chain/IChainInterface\";\nimport { WalletInitializationError, WalletLoginError } from \"../errors\";\nimport { SafeEventEmitterProvider } from \"../provider/IProvider\";\nimport { WALLET_ADAPTERS } from \"../wallet\";\n\nexport type UserInfo = OpenloginUserInfo;\n\nexport const ADAPTER_CATEGORY = {\n  EXTERNAL: \"external\",\n  IN_APP: \"in_app\",\n} as const;\nexport type ADAPTER_CATEGORY_TYPE = typeof ADAPTER_CATEGORY[keyof typeof ADAPTER_CATEGORY];\n\nexport interface AdapterInitOptions {\n  /**\n   * Whether to auto connect to the adapter based on redirect mode or saved adapters\n   */\n  autoConnect?: boolean;\n}\n\nexport const ADAPTER_STATUS = {\n  NOT_READY: \"not_ready\",\n  READY: \"ready\",\n  CONNECTING: \"connecting\",\n  CONNECTED: \"connected\",\n  DISCONNECTED: \"disconnected\",\n  ERRORED: \"errored\",\n} as const;\n\nexport const ADAPTER_EVENTS = {\n  ...ADAPTER_STATUS,\n  ADAPTER_DATA_UPDATED: \"adapter_data_updated\",\n} as const;\nexport type ADAPTER_STATUS_TYPE = typeof ADAPTER_STATUS[keyof typeof ADAPTER_STATUS];\n\nexport type CONNECTED_EVENT_DATA = {\n  adapter: string;\n  reconnected: boolean;\n};\n\nexport type UserAuthInfo = { idToken: string };\nexport interface IAdapter<T> extends SafeEventEmitter {\n  adapterNamespace: AdapterNamespaceType;\n  currentChainNamespace: ChainNamespaceType;\n  chainConfigProxy: CustomChainConfig | null;\n  type: ADAPTER_CATEGORY_TYPE;\n  name: string;\n  sessionTime: number;\n  status: ADAPTER_STATUS_TYPE;\n  provider: SafeEventEmitterProvider | null;\n  adapterData?: unknown;\n  init(options?: AdapterInitOptions): Promise<void>;\n  disconnect(options?: { cleanup: boolean }): Promise<void>;\n  connect(params?: T): Promise<SafeEventEmitterProvider | null>;\n  getUserInfo(): Promise<Partial<UserInfo>>;\n  setChainConfig(customChainConfig: CustomChainConfig): void;\n  setAdapterSettings(adapterSettings: unknown): void;\n  authenticateUser(): Promise<UserAuthInfo>;\n}\n\nexport abstract class BaseAdapter<T> extends SafeEventEmitter implements IAdapter<T> {\n  public adapterData?: unknown = {};\n\n  public sessionTime = 86400;\n\n  // should be added in constructor or from setChainConfig function\n  // before calling init function.\n  protected chainConfig: CustomChainConfig | null = null;\n\n  public abstract clientId: string;\n\n  public abstract adapterNamespace: AdapterNamespaceType;\n\n  public abstract currentChainNamespace: ChainNamespaceType;\n\n  public abstract type: ADAPTER_CATEGORY_TYPE;\n\n  public abstract name: string;\n\n  public abstract status: ADAPTER_STATUS_TYPE;\n\n  get chainConfigProxy(): CustomChainConfig | null {\n    return this.chainConfig ? { ...this.chainConfig } : null;\n  }\n\n  public abstract get provider(): SafeEventEmitterProvider | null;\n\n  setChainConfig(customChainConfig: CustomChainConfig): void {\n    if (this.status === ADAPTER_STATUS.READY) return;\n    if (!customChainConfig.chainNamespace) throw WalletInitializationError.notReady(\"ChainNamespace is required while setting chainConfig\");\n    const defaultChainConfig = getChainConfig(customChainConfig.chainNamespace, customChainConfig.chainId);\n    this.chainConfig = { ...defaultChainConfig, ...customChainConfig };\n  }\n\n  setAdapterSettings(_: unknown): void {}\n\n  checkConnectionRequirements(): void {\n    // we reconnect without killing existing wallet connect session on calling connect again.\n    if (this.name === WALLET_ADAPTERS.WALLET_CONNECT_V1 && this.status === ADAPTER_STATUS.CONNECTING) return;\n    else if (this.status === ADAPTER_STATUS.CONNECTING) throw WalletInitializationError.notReady(\"Already connecting\");\n\n    if (this.status === ADAPTER_STATUS.CONNECTED) throw WalletLoginError.connectionError(\"Already connected\");\n    if (this.status !== ADAPTER_STATUS.READY)\n      throw WalletLoginError.connectionError(\n        \"Wallet adapter is not ready yet, Please wait for init function to resolve before calling connect/connectTo function\"\n      );\n    if (!this.clientId) throw WalletLoginError.connectionError(\"Please initialize Web3Auth with a valid clientId in constructor\");\n  }\n\n  checkInitializationRequirements(): void {\n    if (this.status === ADAPTER_STATUS.NOT_READY) return;\n    if (this.status === ADAPTER_STATUS.CONNECTED) throw WalletInitializationError.notReady(\"Already connected\");\n    if (this.status === ADAPTER_STATUS.READY) throw WalletInitializationError.notReady(\"Adapter is already initialized\");\n  }\n\n  updateAdapterData(data: unknown): void {\n    this.adapterData = data;\n    this.emit(ADAPTER_EVENTS.ADAPTER_DATA_UPDATED, { adapterName: this.name, data });\n  }\n\n  abstract init(options?: AdapterInitOptions): Promise<void>;\n  abstract connect(params?: T): Promise<SafeEventEmitterProvider | null>;\n  abstract disconnect(): Promise<void>;\n  abstract getUserInfo(): Promise<Partial<UserInfo>>;\n  abstract authenticateUser(): Promise<UserAuthInfo>;\n}\n\nexport interface BaseAdapterConfig {\n  label: string;\n  showOnModal?: boolean;\n  showOnMobile?: boolean;\n  showOnDesktop?: boolean;\n}\n\nexport type LoginMethodConfig = Record<\n  string,\n  {\n    /**\n     * Display Name. If not provided, we use the default for openlogin app\n     */\n    name: string;\n    /**\n     * Description for button. If provided, it renders as a full length button. else, icon button\n     */\n    description?: string;\n    /**\n     * Logo to be shown on mouse hover. If not provided, we use the default for openlogin app\n     */\n    logoHover?: string;\n    /**\n     * Logo to be shown on dark background (dark theme). If not provided, we use the default for openlogin app\n     */\n    logoLight?: string;\n    /**\n     * Logo to be shown on light background (light theme). If not provided, we use the default for openlogin app\n     */\n    logoDark?: string;\n    /**\n     * Show login button on the main list\n     */\n    mainOption?: boolean;\n    /**\n     * Whether to show the login button on modal or not\n     */\n    showOnModal?: boolean;\n    /**\n     * Whether to show the login button on desktop\n     */\n    showOnDesktop?: boolean;\n    /**\n     * Whether to show the login button on mobile\n     */\n    showOnMobile?: boolean;\n  }\n>;\n\nexport interface IWalletConnectExtensionAdapter {\n  name: string;\n  chains: ChainNamespaceType[];\n  logo: string;\n  mobile: {\n    native: string;\n    universal: string;\n  };\n  desktop: {\n    native: string;\n    universal: string;\n  };\n}\n\nexport interface WalletConnectV1Data {\n  uri: string;\n  extensionAdapters: IWalletConnectExtensionAdapter[];\n}\n\nexport interface IAdapterDataEvent {\n  adapterName: string;\n  data: unknown;\n}\n\nexport interface INetworkSwitchProvider {\n  addChain(chainConfig: CustomChainConfig): Promise<void>;\n  switchChain(chainId: string): Promise<void>;\n}\nexport interface INetworkSwitch {\n  addNetwork(params: { chainConfig: CustomChainConfig; appOrigin: string }): Promise<boolean>;\n  switchNetwork(params: { currentChainConfig: CustomChainConfig; newChainConfig: Partial<CustomChainConfig>; appOrigin: string }): Promise<boolean>;\n}\n\nexport abstract class BaseNetworkSwitch implements INetworkSwitch {\n  abstract switchNetwork(params: {\n    currentChainConfig: CustomChainConfig;\n    newChainConfig: Partial<CustomChainConfig>;\n    appOrigin: string;\n  }): Promise<boolean>;\n\n  abstract addNetwork(params: { chainConfig: CustomChainConfig; appOrigin: string }): Promise<boolean>;\n}\n","import loglevel from \"loglevel\";\n\nexport default loglevel.getLogger(\"web3auth-logger\");\n","import detectEthereumProvider from \"@metamask/detect-provider\";\nimport {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterInitOptions,\n  AdapterNamespaceType,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  getChainConfig,\n  log,\n  SafeEventEmitterProvider,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletInitializationError,\n  WalletLoginError,\n} from \"@web3auth/base\";\nimport { BaseEvmAdapter } from \"@web3auth/base-evm-adapter\";\n\ninterface EthereumProvider extends SafeEventEmitterProvider {\n  isMetaMask?: boolean;\n  isConnected: () => boolean;\n  chainId: string;\n}\nexport interface MetamaskAdapterOptions {\n  chainConfig?: CustomChainConfig;\n  sessionTime?: number;\n  clientId?: string;\n}\n\nclass MetamaskAdapter extends BaseEvmAdapter<void> {\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.EIP155;\n\n  readonly currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.EIP155;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.EXTERNAL;\n\n  readonly name: string = WALLET_ADAPTERS.METAMASK;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  private rehydrated = false;\n\n  private metamaskProvider: EthereumProvider | null = null;\n\n  constructor(adapterOptions: MetamaskAdapterOptions) {\n    super(adapterOptions);\n    this.chainConfig = adapterOptions?.chainConfig || null;\n    this.sessionTime = adapterOptions?.sessionTime || 86400;\n  }\n\n  get provider(): SafeEventEmitterProvider | null {\n    if (this.status === ADAPTER_STATUS.CONNECTED && this.metamaskProvider) {\n      return this.metamaskProvider as SafeEventEmitterProvider;\n    }\n    return null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options: AdapterInitOptions): Promise<void> {\n    super.checkInitializationRequirements();\n    this.metamaskProvider = (await detectEthereumProvider({ mustBeMetaMask: true })) as EthereumProvider;\n    if (!this.metamaskProvider) throw WalletInitializationError.notInstalled(\"Metamask extension is not installed\");\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.METAMASK);\n    try {\n      log.debug(\"initializing metamask adapter\");\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n\n  setAdapterSettings(options: { sessionTime?: number; clientId?: string }): void {\n    if (this.status === ADAPTER_STATUS.READY) return;\n    if (options?.sessionTime) {\n      this.sessionTime = options.sessionTime;\n    }\n    if (options?.clientId) {\n      this.clientId = options.clientId;\n    }\n  }\n\n  async connect(): Promise<SafeEventEmitterProvider | null> {\n    super.checkConnectionRequirements();\n    // set default to mainnet\n    if (!this.chainConfig) this.chainConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, 1);\n\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, { adapter: WALLET_ADAPTERS.METAMASK });\n    if (!this.metamaskProvider) throw WalletLoginError.notConnectedError(\"Not able to connect with metamask\");\n    try {\n      await this.metamaskProvider.request({ method: \"eth_requestAccounts\" });\n      const { chainId } = this.metamaskProvider;\n      if (chainId !== (this.chainConfig as CustomChainConfig).chainId) {\n        await this.switchChain(this.chainConfig as CustomChainConfig);\n      }\n      this.status = ADAPTER_STATUS.CONNECTED;\n      if (!this.provider) throw WalletLoginError.notConnectedError(\"Failed to connect with provider\");\n      this.provider.once(\"disconnect\", () => {\n        // ready to be connected again\n        this.disconnect();\n      });\n      this.emit(ADAPTER_EVENTS.CONNECTED, { adapter: WALLET_ADAPTERS.METAMASK, reconnected: this.rehydrated } as CONNECTED_EVENT_DATA);\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw WalletLoginError.connectionError(\"Failed to login with metamask wallet\");\n    }\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    await super.disconnect();\n    this.provider?.removeAllListeners();\n    if (options.cleanup) {\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.metamaskProvider = null;\n    } else {\n      // ready to be connected again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    this.rehydrated = false;\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    return {};\n  }\n\n  private async switchChain(chainConfig: CustomChainConfig): Promise<void> {\n    if (!this.metamaskProvider) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    try {\n      await this.metamaskProvider.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{ chainId: chainConfig.chainId }],\n      });\n    } catch (switchError: unknown) {\n      // This error code indicates that the chain has not been added to MetaMask.\n      if ((switchError as { code: number }).code === 4902) {\n        await this.metamaskProvider.request({\n          method: \"wallet_addEthereumChain\",\n          params: [{ chainId: chainConfig.chainId, chainName: chainConfig.displayName, rpcUrls: [chainConfig.rpcTarget] }],\n        });\n      } else {\n        throw switchError;\n      }\n    }\n  }\n}\n\nexport { MetamaskAdapter };\n"],"names":["module","mustBeMetaMask","silent","timeout","_validateInputs","handled","Promise","resolve","handleEthereum","window","removeEventListener","ethereum","isMetaMask","message","console","error","addEventListener","once","setTimeout","Error","CHAIN_NAMESPACES","ADAPTER_NAMESPACES","getChainConfig","chainNamespace","chainId","finalChainId","parseInt","getDefaultNetworkId","rpcTarget","displayName","blockExplorer","ticker","tickerName","getEvmChainConfig","getSolanaChainConfig","Web3AuthError","_inherits","code","_classCallCheck","_this","_defineProperty","Object","defineProperty","_assertThisInitialized","value","_createClass","key","name","this","JSON","stringify","toJSON","CustomError","WalletInitializationError","_this2","extraMessage","messages","concat","fromCode","WalletLoginError","_this3","MULTI_CHAIN_ADAPTERS","OPENLOGIN","WALLET_CONNECT_V1","WALLET_CONNECT_V2","SOLANA_ADAPTERS","TORUS_SOLANA","PHANTOM","SOLLET","SOLLET_EXTENSION","SOLFLARE","SLOPE","EVM_ADAPTERS","TORUS_EVM","METAMASK","COINBASE","WALLET_ADAPTERS","ADAPTER_CATEGORY","ADAPTER_STATUS","NOT_READY","READY","CONNECTING","CONNECTED","DISCONNECTED","ERRORED","ADAPTER_EVENTS","ADAPTER_DATA_UPDATED","SafeEventEmitter","loglevel","MetamaskAdapter","adapterOptions","chainConfig","sessionTime","status","metamaskProvider","set","_","options","_get","_context","detectEthereumProvider","notInstalled","emit","log","debug","autoConnect","rehydrated","connect","clientId","adapter","_context2","notConnectedError","request","method","switchChain","provider","disconnect","reconnected","connectionError","_args3","cleanup","_context3","removeAllListeners","_context4","_context5","params","chainName","rpcUrls","BaseEvmAdapter"],"sourceRoot":""}